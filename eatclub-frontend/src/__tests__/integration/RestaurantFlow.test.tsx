import { render, screen, fireEvent } from '@testing-library/react';
import HomePage from '@/app/page';

// Mock the viewmodel so it returns predictable data
jest.mock('../../viewmodels/useRestaurantsViewModel', () => ({
  useRestaurantsViewModel: () => ({
    restaurants: [
      {
        objectId: '1',
        name: 'Test Restaurant',
        distance: '0.5 km',
        suburb: 'Test Suburb',
        cuisines: ['Italian', 'Pizza'],
        deals: [
          {
            objectId: 'deal1',
            discount: '20',
            dineIn: 'true',
            start: '10:00',
            end: '22:00',
          },
        ],
        imageLink: 'test.jpg',
      },
    ],
    searchTerm: '',
    setSearchTerm: jest.fn(),
    selectedCuisine: '',
    setSelectedCuisine: jest.fn(),
    availableCuisines: [],
    isLoading: false,
    error: null,
  }),
}));

describe('Restaurant Flow Integration', () => {
  it('renders the restaurant list with mock data', async () => {
    render(<HomePage />);

    const restaurantName = await screen.findByText(/Test Restaurant/);
    expect(restaurantName).toBeInTheDocument();
  });

  it('renders a link with correct href to detail page', async () => {
    render(<HomePage />);

    // Get the link generated by next/link
    const link = await screen.findByRole('link', {
      name: /Open Test Restaurant details/i,
    });

    // Check that it points to the correct URL
    expect(link).toHaveAttribute('href', '/restaurant/1');

    // Fire click (wonâ€™t navigate in jsdom, but will confirm no error)
    fireEvent.click(link);
  });
});
